import java.util.Arrays;

public class MaxCoins {

    public int getMaximumConsecutive(int[] coins) {
        int maxPossible = 0;
        /*Find max O(N) Worst case */
        for (int i = 0; i < coins.length; i++) {
            maxPossible += coins[i];
        }
        int consecutiveCount = 1;
        Arrays.sort(coins);
        while (true) {
            if (consecutiveCount == maxPossible + 1) break;
            boolean found = false;
            // Find closest element to @consecutiveCount
            int sum = 0;
            int min = Integer.MAX_VALUE;
            int index = -1;
            for (int j = 0; j < coins.length; j++) {
                int complement = Math.abs(coins[j] - consecutiveCount);
                if (complement == 0) {
                    consecutiveCount++;
                    found = true;
                    break;
                }
                if (complement <= min && coins[j] < consecutiveCount) {
                    min = complement;
                    index = j;
                }
            }
            if (!found) {
                for (int j = index; j >= 0; j--) {
                    sum += coins[j];
                    if (sum == consecutiveCount) {
                        consecutiveCount++;
                        found = true;
                        break;
                    }else if(sum > consecutiveCount){
                        sum -= coins[j];
                    }
                }
            }

            if (!found) {
                break;
            }
        }
        return consecutiveCount;
    }

    public static void main(String[] args) {
        System.out.println("Output test case #1: ");
        System.out.println(new MaxCoins().getMaximumConsecutive(new int []{1,3}));
        System.out.println();

        System.out.println("Output test case #2: ");
        System.out.println(new MaxCoins().getMaximumConsecutive(new int []{1,1,1,4}));
        System.out.println();

        System.out.println("Output test case #3: ");
        System.out.println(new MaxCoins().getMaximumConsecutive(new int[]{1, 4, 10, 3, 1}));
        System.out.println();

        System.out.println("Special code: ");
        System.out.println( MaxCoins.solve2(new int []{1,1,4041,3518,1,1,1,6499,1,1,1,1,1,1,695,3266,1,1,1,1,1,1,1,1896,88,7227,2215,5769,3689,1,1,2952,7703,1,9010,3586,8725,5569,1,1,1,1,3689,9926,6803,5662,1,5654,3655,1,1,859,1,8564,1,7576,1,1,8552,7419,1,1,1,1,4517,1,1,8052,1,1,9073,1003,1,1,1,2865,1,4696,3585,1,1,1,1,5308,4986,7188,1,9572,7670,1,302,1,7505,1,9823,2441,1,3190,1,1,1,7320,1,4494,5643,6145,1,3385,2101,1431,1,8146,1,1,1,1,3019,1265,9470,2438,2154,1,1,1,5611,1,1,1717,1,8862,1,1,1,1,4765,1,6793,3671,5770,1,9390,1,9674,2590,1,1,3149,1,5021,2323,677,1,1,1,1,751,1,1,5008,7909,1,1257,1,364,5003,506,1691,1,8998,9564,1,1,1,4800,3553,1,1,9619,1,6375,1,1,5934,1581,1200,1,4556,3173,5264,2162,1,1,1,842,1,1,1,1240,8855,1,9721,1,8060,1,1,1,6865,4595,298,1,1,1,1,1,167,7950,1384,1,1,1,9167,7354,1,1,1,1,1,1,3008,1113,1,1298,4960,1,1026,1,1,1,1,1,7485,8012,5452,9848,1,5245,1,1,2425,1,1,5559,1,1,7676,1,1,1,6563,5343,1854,1,1,1,2525,1,6701,1,389,1,4326,4847,1,8024,1,1,1,1,1,1,7374,1,1,4852,5062,6509,1,1,49,2592,3863,1,1,1,1,1,1,1869,925,1,1,1,3675,4226,1,2022,1,4547,1,6418,3014,1,1,3886,8067,9469,2853,1,9444,1,8133,1851,1,7978,5600,100,1,2272,5137,3049,1,1,1,9614,7978,1,1,1068,3318,1,1,4204,1,4420,1,1,1,1,1,5249,1,1,1,6213,400,1,9152,1,1,1,3615,1,1,1,1,2393,7785,1,1929,6716,4697,1,1,1,3270,1,1,7021,5805,1,1,6016,1789,1310,1,1,1,1,1,1,5102,5697,8663,480,4878,1,9366,3980,1676,8310,1,1,678,3171,1,1,2422,8126,1,1,1,6805,8534,1732,1798,1,6249,1,1,1,2193,6309,1,9161,8399,1,1,4764,9457,1,1,190,1,1,8535,6993,8692,5310,2981,1,1,1,1,1,1,202,6744,1,9780,1,1,1,7100,1,1,9845,1,4858,1,2669,4190,6575,6730,1,1,6088,6326,9899,1,7866,1757,4372,6102,1,1,1,1,1,1,9122,1,1,1,3928,275,2376,9606,1,1,2167,8110,1,3567,3391,1,1,315,1,1,5400,9417,1,1,8098,6550,1,2773,572,9392,9704,1,9406,5795,1360,2997,6965,3688,1,2236,2929,2778,5327,7176,8703,5637,8191,4458,1,1,5519,1,3486,7823,1,1,1,1,7564,1718,9909,1,1,5928,1,8825,4638,1912,747,3123,1,577,1,5014,8458,1710,1734,7602,1,1,1,2023,1,9260,2517,1,1,6750,7654,293,1,1,6274,1,1,4980,1,1,6129,1,3076,1,1,1,2169,1,8977,4702,1867,1,8208,1,5619,9929,1513,1957,1,1,1,1,1,1,9611,1,3025,1,6628,1,9167,7938,4389,1,7299,677,9572,1,1,1,4456,29,5752,1,1,1,7743,1000,1029,6528,1,2776,5846,1,4095,7781,9046,2404,7022,1024,1,1,7659,839,9894,388,2522,1,1757,3023,1,1,1,1,5427,5798,1,7655,1,1,1,1,1,940,1,6020,1,8807,4437,1,1,1569,1,6153,1,3373,5232,5655,1,1896,3935,1,3406,4927,92,1,6431,1,1,1,2015,1,284,1,7431,8550,1,1,1,1,1,1,1,1,9572,1,1,507,7743,1,3043,2965,1,1,7003,1104,5039,1,9231,4232,1,4075,1,8397,2368,7828,1,1750,8722,5747,8942,3262,2556,2538,6200,2417,1,6718,1,1,1,6644,1872,1,7369,5648,1918,9341,1,1,143,8733,641,1,1744,2437,1,1,9080,9400,1,7079,1,1,8852,1,1,5074,1,1,1,1,1,1,8300,5327,6166,6527,1,1,1,1,1,4850,1,1,1675,1,1,6624,1,1,6003,9400,9747,1,275,1,1,1683,8254,1,146,5065,1,1005,2386,9328,130,1,1534,7972,4476,1,1,1,1,5051,4499,7510,833,1,1,1,1,8737,1,139,9788,1,7761,1,1,7293,3064,1,6205,1,1,1,1,1,3606,1,9515,976,1,8841,1,1,1,6219,1,1,1,1,1,6445,784,5888,7252,1,3327,1,1,1,4851,1,3028,1,5853,1,6446,1,1,1,1,1,1,9286,5248,3660,1,668,1,4109,1,1,7220,2736,1,4179,1,344,1,1,1,7705,1,1,1,1798,7281,8321,1,6444,887,4779,1,1,1,1,4451,5541,1,1,4543,1,1,3276,5231,1,8449,5942,1,1,8080,1,1,9040,1,1,1,7243,3690,1,1233,1,7472,4845,500,3105,6342,9800,1,4843,8454,1,8281,1,8768,9359,1,936,1,1,1,1,1,1,1,2540,1966,1,6505,3921,1,5747,7968,1146,8335,8080,1,7856,4766,1,1,1,1,1,1,2435,4595,3851,3740,1,1,5610,1,8894,7723,1,470,9199,1,9538,7241,1,1,1,5071,353,104,4724,9689,4191,7057,1,1,138,8427,1572,3210,1,1,5802,1,781,3784,8088,1,1,1,8331,1,1,1,4611,5792,1352,3896,1,1,1623,1,7311,1,9899,1,1259,3332,7915,7119,1,1,1,1,6220,340,1,977,1,1,1,1,4330,1216,4518,1,8248,2853,6427,817,1,4287,5443,9859,4629,1,3306,3496,1,1,1,1,1,1,1,1,5203,1,7879,3093,5712,1,4416,9770,5358,1,2302,1,9583,1,1,1,1,3369,1,1,1,8172,1,33,1,1846,1,1,1,2784,7108,1,1,3436,1,3442,5179,410,1,9626,1,1,3781,3222,1,1,1598,509,1,1,1,1,5522,9106,363,1,8206,1,1,4180,1,6716,1,3353,2593,6174,1,1,3738,1,1,1533,1,1,9299}));
        System.out.println("");

        System.out.println("Output test case #4: ");
        System.out.println(new MaxCoins().getMaximumConsecutive(new int []{1,1,4041,3518,1,1,1,6499,1,1,1,1,1,1,695,3266,1,1,1,1,1,1,1,1896,88,7227,2215,5769,3689,1,1,2952,7703,1,9010,3586,8725,5569,1,1,1,1,3689,9926,6803,5662,1,5654,3655,1,1,859,1,8564,1,7576,1,1,8552,7419,1,1,1,1,4517,1,1,8052,1,1,9073,1003,1,1,1,2865,1,4696,3585,1,1,1,1,5308,4986,7188,1,9572,7670,1,302,1,7505,1,9823,2441,1,3190,1,1,1,7320,1,4494,5643,6145,1,3385,2101,1431,1,8146,1,1,1,1,3019,1265,9470,2438,2154,1,1,1,5611,1,1,1717,1,8862,1,1,1,1,4765,1,6793,3671,5770,1,9390,1,9674,2590,1,1,3149,1,5021,2323,677,1,1,1,1,751,1,1,5008,7909,1,1257,1,364,5003,506,1691,1,8998,9564,1,1,1,4800,3553,1,1,9619,1,6375,1,1,5934,1581,1200,1,4556,3173,5264,2162,1,1,1,842,1,1,1,1240,8855,1,9721,1,8060,1,1,1,6865,4595,298,1,1,1,1,1,167,7950,1384,1,1,1,9167,7354,1,1,1,1,1,1,3008,1113,1,1298,4960,1,1026,1,1,1,1,1,7485,8012,5452,9848,1,5245,1,1,2425,1,1,5559,1,1,7676,1,1,1,6563,5343,1854,1,1,1,2525,1,6701,1,389,1,4326,4847,1,8024,1,1,1,1,1,1,7374,1,1,4852,5062,6509,1,1,49,2592,3863,1,1,1,1,1,1,1869,925,1,1,1,3675,4226,1,2022,1,4547,1,6418,3014,1,1,3886,8067,9469,2853,1,9444,1,8133,1851,1,7978,5600,100,1,2272,5137,3049,1,1,1,9614,7978,1,1,1068,3318,1,1,4204,1,4420,1,1,1,1,1,5249,1,1,1,6213,400,1,9152,1,1,1,3615,1,1,1,1,2393,7785,1,1929,6716,4697,1,1,1,3270,1,1,7021,5805,1,1,6016,1789,1310,1,1,1,1,1,1,5102,5697,8663,480,4878,1,9366,3980,1676,8310,1,1,678,3171,1,1,2422,8126,1,1,1,6805,8534,1732,1798,1,6249,1,1,1,2193,6309,1,9161,8399,1,1,4764,9457,1,1,190,1,1,8535,6993,8692,5310,2981,1,1,1,1,1,1,202,6744,1,9780,1,1,1,7100,1,1,9845,1,4858,1,2669,4190,6575,6730,1,1,6088,6326,9899,1,7866,1757,4372,6102,1,1,1,1,1,1,9122,1,1,1,3928,275,2376,9606,1,1,2167,8110,1,3567,3391,1,1,315,1,1,5400,9417,1,1,8098,6550,1,2773,572,9392,9704,1,9406,5795,1360,2997,6965,3688,1,2236,2929,2778,5327,7176,8703,5637,8191,4458,1,1,5519,1,3486,7823,1,1,1,1,7564,1718,9909,1,1,5928,1,8825,4638,1912,747,3123,1,577,1,5014,8458,1710,1734,7602,1,1,1,2023,1,9260,2517,1,1,6750,7654,293,1,1,6274,1,1,4980,1,1,6129,1,3076,1,1,1,2169,1,8977,4702,1867,1,8208,1,5619,9929,1513,1957,1,1,1,1,1,1,9611,1,3025,1,6628,1,9167,7938,4389,1,7299,677,9572,1,1,1,4456,29,5752,1,1,1,7743,1000,1029,6528,1,2776,5846,1,4095,7781,9046,2404,7022,1024,1,1,7659,839,9894,388,2522,1,1757,3023,1,1,1,1,5427,5798,1,7655,1,1,1,1,1,940,1,6020,1,8807,4437,1,1,1569,1,6153,1,3373,5232,5655,1,1896,3935,1,3406,4927,92,1,6431,1,1,1,2015,1,284,1,7431,8550,1,1,1,1,1,1,1,1,9572,1,1,507,7743,1,3043,2965,1,1,7003,1104,5039,1,9231,4232,1,4075,1,8397,2368,7828,1,1750,8722,5747,8942,3262,2556,2538,6200,2417,1,6718,1,1,1,6644,1872,1,7369,5648,1918,9341,1,1,143,8733,641,1,1744,2437,1,1,9080,9400,1,7079,1,1,8852,1,1,5074,1,1,1,1,1,1,8300,5327,6166,6527,1,1,1,1,1,4850,1,1,1675,1,1,6624,1,1,6003,9400,9747,1,275,1,1,1683,8254,1,146,5065,1,1005,2386,9328,130,1,1534,7972,4476,1,1,1,1,5051,4499,7510,833,1,1,1,1,8737,1,139,9788,1,7761,1,1,7293,3064,1,6205,1,1,1,1,1,3606,1,9515,976,1,8841,1,1,1,6219,1,1,1,1,1,6445,784,5888,7252,1,3327,1,1,1,4851,1,3028,1,5853,1,6446,1,1,1,1,1,1,9286,5248,3660,1,668,1,4109,1,1,7220,2736,1,4179,1,344,1,1,1,7705,1,1,1,1798,7281,8321,1,6444,887,4779,1,1,1,1,4451,5541,1,1,4543,1,1,3276,5231,1,8449,5942,1,1,8080,1,1,9040,1,1,1,7243,3690,1,1233,1,7472,4845,500,3105,6342,9800,1,4843,8454,1,8281,1,8768,9359,1,936,1,1,1,1,1,1,1,2540,1966,1,6505,3921,1,5747,7968,1146,8335,8080,1,7856,4766,1,1,1,1,1,1,2435,4595,3851,3740,1,1,5610,1,8894,7723,1,470,9199,1,9538,7241,1,1,1,5071,353,104,4724,9689,4191,7057,1,1,138,8427,1572,3210,1,1,5802,1,781,3784,8088,1,1,1,8331,1,1,1,4611,5792,1352,3896,1,1,1623,1,7311,1,9899,1,1259,3332,7915,7119,1,1,1,1,6220,340,1,977,1,1,1,1,4330,1216,4518,1,8248,2853,6427,817,1,4287,5443,9859,4629,1,3306,3496,1,1,1,1,1,1,1,1,5203,1,7879,3093,5712,1,4416,9770,5358,1,2302,1,9583,1,1,1,1,3369,1,1,1,8172,1,33,1,1846,1,1,1,2784,7108,1,1,3436,1,3442,5179,410,1,9626,1,1,3781,3222,1,1,1598,509,1,1,1,1,5522,9106,363,1,8206,1,1,4180,1,6716,1,3353,2593,6174,1,1,3738,1,1,1533,1,1,9299}));
        System.out.println("");

        //1 1 3 4 10
    }

    static int solve2 (int [] coins){
        Arrays.sort(coins);
        int result=1;

        int idx=0;
        while(idx<coins.length && result>=coins[idx]){
            result+=coins[idx];
            idx++;
        }
        return result;
    }
}
